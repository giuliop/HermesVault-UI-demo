{
    "hints": {
        "create(account)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "init(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "update()void": {
            "call_config": {
                "update_application": "CALL",
                "delete_application": "CALL"
            }
        },
        "set_immutable()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "validate_manager()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "noop(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deposit(byte[32][],byte[32][],address)(uint64,byte[32])": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(byte[32][],byte[32][],account,bool,uint64)(uint64,byte[32])": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 3,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "TSS": {
                    "type": "bytes",
                    "key": "TSS"
                },
                "immutable": {
                    "type": "uint64",
                    "key": "immutable"
                },
                "initialized": {
                    "type": "uint64",
                    "key": "initialized"
                },
                "inserted_leaves_count": {
                    "type": "uint64",
                    "key": "inserted_leaves_count"
                },
                "manager": {
                    "type": "bytes",
                    "key": "manager"
                },
                "next_root_index": {
                    "type": "uint64",
                    "key": "next_root_index"
                },
                "root": {
                    "type": "bytes",
                    "key": "root"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "APP",
        "methods": [
            {
                "name": "create",
                "args": [
                    {
                        "type": "account",
                        "name": "manager"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Create the application"
            },
            {
                "name": "init",
                "args": [
                    {
                        "type": "account",
                        "name": "tss"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Initialize the application (creator only).\nCall after creation and funding to create boxes and set the TSS address. Once initialized, the contract cannot be re-initialized."
            },
            {
                "name": "update",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Update the application if it is mutable (manager only)"
            },
            {
                "name": "set_immutable",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Set the contract as immutable (manager/creator only)"
            },
            {
                "name": "validate_manager",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Fail if the sender is not the protocol manager.\nTo be used by the TSS to allow manager-only functions"
            },
            {
                "name": "noop",
                "args": [
                    {
                        "type": "uint64",
                        "name": "counter"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "No operation, use to make dummy app calls to increase opcode budget"
            },
            {
                "name": "deposit",
                "args": [
                    {
                        "type": "byte[32][]",
                        "name": "proof"
                    },
                    {
                        "type": "byte[32][]",
                        "name": "public_inputs"
                    },
                    {
                        "type": "address",
                        "name": "sender"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,byte[32])"
                },
                "desc": "Deposit funds.\nIf successful, will store a deposit receipt in a box named after the commitment; the box must be passed in. Call `insert_commitment` method afterwards to insert the commitment"
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "byte[32][]",
                        "name": "proof"
                    },
                    {
                        "type": "byte[32][]",
                        "name": "public_inputs"
                    },
                    {
                        "type": "account",
                        "name": "recipient"
                    },
                    {
                        "type": "bool",
                        "name": "no_change"
                    },
                    {
                        "type": "uint64",
                        "name": "extra_txn_fee"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,byte[32])"
                },
                "desc": "Withdraw funds.\nThe optional argument `no_change` is used to instruct the contract to not add the change to the tree; this is meant to be used when the tree is full. If used and the user does not withdraw the full amount available, the change will be lost.\nThe optional argument `extra_txn_fee` is used to indicate that the user wants to pay that as additional transaction fee to the blockchain on top of the minimum fee (e.g., if there is congestion). This amount will be subtracted from the withdrawal amount. This can be useful when calling the TSS (treasury smart signature) to pay the transaction fees."
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}